{"version":3,"sources":["SayApp.js","serviceWorker.js","index.js"],"names":["Say","setWorkers","jack","language","profile","SayApp","state","isSpeaking","inputRef","React","createRef","ref","this","size","placeholder","defaultValue","onClick","e","sayText","text","current","value","setState","console","log","say","then","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8SAGAA,IAAIC,WAAW,CACd,OAAU,kCACV,IAAO,6BAGR,IAAIC,EAAO,IAAIF,IAAI,CAClBG,SAAU,KACVC,QAAS,SAgDKC,E,YA5Cd,aAAe,IAAD,8BACb,+CAEKC,MAAQ,CACZC,YAAY,GAGb,EAAKC,SAAWC,IAAMC,YAPT,E,sEAUJ,IAAD,OACR,OACC,6BACC,4DAEA,6BACC,2BAAOC,IAAKC,KAAKJ,SAAUK,KAAK,KAAKC,YAAY,kCAAkCC,aAAa,gBAChG,4BAAQC,QAAS,SAAAC,GAAC,OAAI,EAAKC,YAA3B,QAGD,6BAEA,8CAAoBN,KAAKN,MAAMC,WAAY,MAAM,S,gCAKzC,IAAD,OACHY,EAAOP,KAAKJ,SAASY,QAAQC,MACnCT,KAAKU,SAAS,CACbf,YAAY,IACV,WACFgB,QAAQC,IAAI,iBACZtB,EAAKuB,IAAIN,GAAMO,MAAK,WACnBH,QAAQC,IAAI,iBACZ,EAAKF,SAAS,CACbf,YAAY,c,GArCIoB,aCDDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMb,MAAK,SAAAc,GACjCA,EAAaC,kB","file":"static/js/main.fd84c1a7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Say from 'jaxcore-say';\n\nSay.setWorkers({\n\t'espeak': 'webworkers/espeak-all-worker.js',\n\t'sam': 'webworkers/sam-worker.js'\n});\n\nvar jack = new Say({\n\tlanguage: 'en',\n\tprofile: 'Jack'\n});\n\nclass SayApp extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\t\n\t\tthis.state = {\n\t\t\tisSpeaking: false\n\t\t};\n\t\t\n\t\tthis.inputRef = React.createRef();\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h3>Basic Text-to-Speech Example</h3>\n\t\t\t\t\n\t\t\t\t<div>\n\t\t\t\t\t<input ref={this.inputRef} size=\"40\" placeholder=\"Type something then press Enter\" defaultValue=\"Hello World\"/>\n\t\t\t\t\t<button onClick={e => this.sayText()}>Say</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<br/>\n\t\t\t\t\n\t\t\t\t<div>Is Speaking : {this.state.isSpeaking? 'YES':'NO'}</div>\n\t\t\t</div>\n\t\t);\n\t}\n\t\n\tsayText() {\n\t\tconst text = this.inputRef.current.value;\n\t\tthis.setState({\n\t\t\tisSpeaking: true\n\t\t}, () => {\n\t\t\tconsole.log('Jack: started');\n\t\t\tjack.say(text).then(() => {\n\t\t\t\tconsole.log('Jack: stopped');\n\t\t\t\tthis.setState({\n\t\t\t\t\tisSpeaking: false\n\t\t\t\t});\n\t\t\t});\n\t\t\t\n\t\t});\n\t}\n}\n\nexport default SayApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SayApp from './SayApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SayApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}