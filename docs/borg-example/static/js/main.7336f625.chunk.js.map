{"version":3,"sources":["SayApp.js","serviceWorker.js","index.js"],"names":["Say","setWorkers","say","language","SayApp","sayText","autoplay","document","location","search","startsWith","atob","decodeURIComponent","substring","length","state","isSpeaking","inputRef","React","createRef","onSubmit","e","preventDefault","this","ref","size","placeholder","value","onChange","setState","target","onClick","text","current","btext","window","btoa","history","pushState","encodeURIComponent","console","log","profile","then","Component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAGAA,IAAIC,WAAW,CACd,OAAU,kCACV,IAAO,6BAGR,IAAIC,EAAM,IAAIF,IAAI,CACjBG,SAAU,UA0EIC,E,YArEd,aAAe,IAAD,EAETC,EAFS,oBACb,8CAEA,IAAIC,GAAW,EAHF,OAKTC,SAASC,SAASC,OAAOC,WAAW,UACvCL,EAAUM,KAAKC,mBAAmBL,SAASC,SAASC,OAAOI,UAAU,QAAQC,UAC7ER,GAAW,GAEPD,EAAU,yHAEf,EAAKU,MAAQ,CACZC,YAAY,EACZX,UACAC,YAGD,EAAKW,SAAWC,IAAMC,YAjBT,E,sEAoBJ,IAAD,OACR,OACC,6BACC,4DAEA,6BACC,0BAAMC,SAAU,SAAAC,GACK,OAApBA,EAAEC,kBAAyB,IAI1BC,KAAKR,MAAMT,SAAU,GAAM,2BAAOkB,IAAKD,KAAKN,SAAUQ,KAAK,KAAKC,YAAY,kCACxEC,MAAOJ,KAAKR,MAAMV,QAASuB,SAAU,SAAAP,GAAC,OAAI,EAAKQ,SAAS,CAACxB,QAASgB,EAAES,OAAOH,WAGhF,4BAAQI,QAAS,SAAAV,GAAC,OAAI,EAAKhB,YAA3B,SAIF,6BAEA,uDAA6BkB,KAAKR,MAAMC,WAAa,MAAQ,S,gCAKrD,IAAD,OACHgB,EAAOT,KAAKR,MAAMT,SAAUiB,KAAKR,MAAMV,QAAUkB,KAAKN,SAASgB,QAAQN,MAC7EJ,KAAKM,SAAS,CACbb,YAAY,IACV,WAEF,IAAIkB,EAAQC,OAAOC,KAAKJ,GACxBG,OAAOE,QAAQC,UAAU,KAAM,KAAM,QAAQC,mBAAmBL,IAEhEM,QAAQC,IAAI,iBAEZvC,EAAIA,IAAI8B,EAAM,CAACU,QAAS,SAASC,MAAK,WACrC,EAAKd,SAAS,CACbb,YAAY,EACZV,UAAU,c,GA7DMsC,aCDDC,QACW,cAA7BV,OAAO3B,SAASsC,UAEe,UAA7BX,OAAO3B,SAASsC,UAEhBX,OAAO3B,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAY1C,SAAS2C,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMV,MAAK,SAAAW,GACjCA,EAAaC,kB","file":"static/js/main.7336f625.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Say from 'jaxcore-say';\n\nSay.setWorkers({\n\t'espeak': 'webworkers/espeak-all-worker.js',\n\t'sam': 'webworkers/sam-worker.js'\n});\n\nvar say = new Say({\n\tlanguage: 'en-us'\n\t// language: 'fr' // borg voice also supports other languages\n});\n\nclass SayApp extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tlet sayText;\n\t\tlet autoplay = false;\n\t\t// the autoplay feature hides the url in base64 encoding (send friends the url)\n\t\tif (document.location.search.startsWith('?say=')) {\n\t\t\tsayText = atob(decodeURIComponent(document.location.search.substring('?say='.length)));\n\t\t\tautoplay = true;\n\t\t}\n\t\telse sayText = \"we are the borg... resistance is futile.... your technological and biological distinctiveness will be added to our own\"\n\t\t\n\t\tthis.state = {\n\t\t\tisSpeaking: false,\n\t\t\tsayText,\n\t\t\tautoplay\n\t\t};\n\t\t\n\t\tthis.inputRef = React.createRef();\n\t}\n\t\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h3>Borg Text-to-Speech Example:</h3>\n\t\t\t\t\n\t\t\t\t<div>\n\t\t\t\t\t<form onSubmit={e => {\n\t\t\t\t\t\te.preventDefault(); return false;\n\t\t\t\t\t}}>\n\t\t\t\t\t\t\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.state.autoplay? '' : (<input ref={this.inputRef} size=\"70\" placeholder=\"Type something then press Enter\"\n\t\t\t\t\t\t\t\t   value={this.state.sayText} onChange={e => this.setState({sayText: e.target.value})}/>)\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t<button onClick={e => this.sayText()}>Say</button>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<br/>\n\t\t\t\t\n\t\t\t\t<div>Are the Borg Speaking? {this.state.isSpeaking ? 'YES' : 'NO'}</div>\n\t\t\t</div>\n\t\t);\n\t}\n\t\n\tsayText() {\n\t\tconst text = this.state.autoplay? this.state.sayText : this.inputRef.current.value;\n\t\tthis.setState({\n\t\t\tisSpeaking: true\n\t\t}, () => {\n\t\t\t\n\t\t\tlet btext = window.btoa(text);\n\t\t\twindow.history.pushState(null, null, '?say='+encodeURIComponent(btext));\n\t\t\t\n\t\t\tconsole.log('Borg: started');\n\t\t\t\n\t\t\tsay.say(text, {profile: 'Borg'}).then(() => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tisSpeaking: false,\n\t\t\t\t\tautoplay: false\n\t\t\t\t});\n\t\t\t\t\n\t\t\t})\n\t\t\t\n\t\t});\n\t}\n}\n\nexport default SayApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SayApp from './SayApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<SayApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}